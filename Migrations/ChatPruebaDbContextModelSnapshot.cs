// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PruebaChatMVC.Data;

#nullable disable

namespace PruebaChatMVC.Migrations
{
    [DbContext(typeof(ChatPruebaDbContext))]
    partial class ChatPruebaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PruebaChatMVC.Models.Messages", b =>
                {
                    b.Property<Guid>("idMensaje")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("FechaDeEnvio")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdChatSended")
                        .HasColumnType("int");

                    b.Property<string>("Mensaje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Reciber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Sender")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("nameSender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("visto")
                        .HasColumnType("bit");

                    b.HasKey("idMensaje");

                    b.HasIndex("IdChatSended");

                    b.HasIndex("Reciber");

                    b.HasIndex("Sender");

                    b.ToTable("MensajesEnviados");
                });

            modelBuilder.Entity("PruebaChatMVC.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.Property<string>("pasword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            id = new Guid("bacab9dc-ba71-49bf-be42-99dfeda0504c"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Daniel",
                            isDelete = false,
                            pasword = "123"
                        },
                        new
                        {
                            id = new Guid("cc397046-0bb8-4406-8eb0-d5795ed51512"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Julio",
                            isDelete = false,
                            pasword = "456"
                        });
                });

            modelBuilder.Entity("PruebaChatMVC.Models.UserChat", b =>
                {
                    b.Property<int>("IdChat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdChat"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<Guid>("idUser1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idUser2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("IdChat");

                    b.HasIndex("idUser1");

                    b.HasIndex("idUser2");

                    b.ToTable("UsuarioChat");

                    b.HasData(
                        new
                        {
                            IdChat = 1,
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            idUser1 = new Guid("bacab9dc-ba71-49bf-be42-99dfeda0504c"),
                            idUser2 = new Guid("cc397046-0bb8-4406-8eb0-d5795ed51512"),
                            isDelete = false
                        });
                });

            modelBuilder.Entity("PruebaChatMVC.Models.Messages", b =>
                {
                    b.HasOne("PruebaChatMVC.Models.UserChat", "relMensaje_Chat")
                        .WithMany("Messages")
                        .HasForeignKey("IdChatSended")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RelacionMensajesChat");

                    b.HasOne("PruebaChatMVC.Models.User", "relReciver_User")
                        .WithMany("relUser_Reciber")
                        .HasForeignKey("Reciber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RelacionUsuarioReceptor");

                    b.HasOne("PruebaChatMVC.Models.User", "relSender_User")
                        .WithMany("relUser_Sender")
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RelacionUsuarioEmisor");

                    b.Navigation("relMensaje_Chat");

                    b.Navigation("relReciver_User");

                    b.Navigation("relSender_User");
                });

            modelBuilder.Entity("PruebaChatMVC.Models.UserChat", b =>
                {
                    b.HasOne("PruebaChatMVC.Models.User", "rel_User1_User2")
                        .WithMany("relChat_User1")
                        .HasForeignKey("idUser1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RelacionUsuario2Chat");

                    b.HasOne("PruebaChatMVC.Models.User", "rel_User2_User1")
                        .WithMany("relChat_User2")
                        .HasForeignKey("idUser2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RelacionUsuario1Chat");

                    b.Navigation("rel_User1_User2");

                    b.Navigation("rel_User2_User1");
                });

            modelBuilder.Entity("PruebaChatMVC.Models.User", b =>
                {
                    b.Navigation("relChat_User1");

                    b.Navigation("relChat_User2");

                    b.Navigation("relUser_Reciber");

                    b.Navigation("relUser_Sender");
                });

            modelBuilder.Entity("PruebaChatMVC.Models.UserChat", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
